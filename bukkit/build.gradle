import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'id.luckynetwork.lyrams.lyralibs.java-conventions'
}
apply plugin: 'maven-publish'

configurations {
    otherProjects
}

configurations {
    extraLibs
}

def pluginName = 'LyraLibs-Bukkit'
def code = 0

dependencies {
    compileOnly project(":core")
    otherProjects project(":version-support")
    otherProjects project(":version-support1_8")
    otherProjects project(":version-support1_12")
    otherProjects project(":version-support1_13")
    otherProjects project(":version-support1_16")

    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    //mongodb
    extraLibs 'org.mongodb:mongo-java-driver:3.12.11'
    // jedis
    extraLibs 'redis.clients:jedis:3.7.0'
    // gson
    extraLibs 'com.google.code.gson:gson:2.9.0'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    // jetbrains annotations
    compileOnly 'org.jetbrains:annotations:23.0.0'
    // spigot 1.12
    compileOnly 'org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT'

    configurations.compileOnly.extendsFrom(configurations.extraLibs)
    configurations.compileOnly.extendsFrom(configurations.otherProjects)
}

task updateBuildNumber {
    def versionPropsFile = file 'version.properties'
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    code = versionProps['VERSION_CODE'].toInteger() + 1

    project.version = "b" + code.toString()

    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.otherProjects.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task jarHeavy(type: Jar) {
    from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "shaded/LyraLibs-Bukkit-shaded b" + code.toString() + ".jar"

    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.otherProjects.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "version"  : project.version.toString(),
            "mainClass": project.group + ".$pluginName",
            "name"     : pluginName,
            "number"   : code.toString()
    ]
}

repositories {
    mavenCentral()
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

assemble.dependsOn(sourcesJar)
assemble.dependsOn(javadocJar)
assemble.dependsOn(jarHeavy)