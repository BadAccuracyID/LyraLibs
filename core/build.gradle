plugins {
    id 'id.luckynetwork.lyrams.lyralibs.java-conventions'
}
plugins {
    id 'maven-publish'
}

configurations {
    extraLibs
}

def code = 0

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    //mongodb
    compileOnly 'org.mongodb:mongo-java-driver:3.12.10'
    // jedis
    compileOnly 'redis.clients:jedis:3.7.0'
    // gson
    compileOnly 'com.google.code.gson:gson:2.8.6'
    // hikariCP
    compileOnly 'com.zaxxer:HikariCP:5.0.1'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    // jetbrains annotations
    compileOnly 'org.jetbrains:annotations:20.1.0'

    configurations.compileOnly.extendsFrom(configurations.extraLibs)
}

task updateBuildNumber {
    def versionPropsFile = file 'version.properties'
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    code = versionProps['VERSION_CODE'].toInteger() + 1

    project.version = "b" + code.toString()

    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "LyraLibs-Core b" + code.toString() + ".jar"

    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

publishing {
    repositories {
        maven {
            name = "LyraLibs-Core"
            url = uri("https://maven.pkg.github.com/BadAccuracyID/LyraLibs")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}